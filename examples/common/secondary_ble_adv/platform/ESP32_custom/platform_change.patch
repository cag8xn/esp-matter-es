diff --git a/src/platform/ESP32/BLEManagerImpl.h b/src/platform/ESP32/BLEManagerImpl.h
index 2a489420a0..ae315e0b90 100644
--- a/src/platform/ESP32/BLEManagerImpl.h
+++ b/src/platform/ESP32/BLEManagerImpl.h
@@ -61,6 +61,9 @@ struct ble_gatt_char_context
     void * arg;
 };
 
+#define MAX_ADV_DATA_LEN 31
+#define MAX_DEVICE_NAME_LEN 29
+
 #endif // CONFIG_BT_BLUEDROID_ENABLED
 
 #include <ble/Ble.h>
@@ -143,6 +146,47 @@ public:
     CHIP_ERROR ConfigureScanResponseData(ByteSpan data);
     void ClearScanResponseData(void);
 
+    CHIP_ERROR SetSecondaryGATTService(struct ble_gatt_svc_def *gatt_svc, size_t gattSvcIndex)
+    {
+        if (!gatt_svc || gattSvcIndex > 1)
+        {
+            return CHIP_ERROR_INVALID_ARGUMENT;
+        }
+        mSecondGATTServiceIndex = gattSvcIndex;
+        memcpy(&mGATTServices[gattSvcIndex], gatt_svc, sizeof(struct ble_gatt_svc_def));
+        return CHIP_NO_ERROR;
+    }
+
+    using BleGapEventHandler = int(*)(struct ble_gap_event * event, void * arg);
+
+    void SetSecondaryAdvGapEventHandler(BleGapEventHandler handler) { mSecondaryBleGapEventHandler = handler; }
+
+    CHIP_ERROR SetSecondaryAdvDeviceName(const char *deviceName)
+    {
+        strncpy(mSecondaryAdvDeviceName, deviceName, MAX_DEVICE_NAME_LEN);
+        mSecondaryAdvDeviceName[MAX_DEVICE_NAME_LEN] = 0;
+        return CHIP_NO_ERROR;
+    }
+
+    CHIP_ERROR SetSecondaryAdvUuid(const ByteSpan &uuid)
+    {
+        if (uuid.size() != 16)
+        {
+            return CHIP_ERROR_INVALID_ARGUMENT;
+        }
+        mSecondaryAdvUuid.u.type = BLE_UUID_TYPE_128;
+        memcpy(mSecondaryAdvUuid.value, uuid.data(), uuid.size());
+        return CHIP_NO_ERROR;
+    }
+
+    void SetSecondaryBleSmConfig(bool bleBonding, bool bleSmSc)
+    {
+        mSecondaryBleBonding = bleBonding;
+        mSecondaryBleSmSc = bleSmSc;
+    }
+
+    void RefreshAdv(void);
+
 private:
     chip::Optional<chip::ByteSpan> mScanResponse;
     uint8_t scanResponseBuffer[MAX_SCAN_RSP_DATA_LEN];
@@ -346,7 +390,7 @@ private:
     static void bleprph_host_task(void * param);
     static void bleprph_on_sync(void);
     static void bleprph_on_reset(int);
-    static const struct ble_gatt_svc_def CHIPoBLEGATTAttrs[];
+    static const struct ble_gatt_svc_def CHIPoBLEGATTService;
     static int ble_svr_gap_event(struct ble_gap_event * event, void * arg);
 
     static int gatt_svr_chr_access(uint16_t conn_handle, uint16_t attr_handle, struct ble_gatt_access_ctxt * ctxt, void * arg);
@@ -380,6 +424,31 @@ private:
 #endif // CONFIG_ENABLE_ESP32_BLE_CONTROLLER
 
     static void DriveBLEState(intptr_t arg);
+
+    uint8_t mAdvData[MAX_ADV_DATA_LEN];
+    uint16_t mAdvDataLen;
+    static constexpr uint8_t kChipAdvInstance = 0;
+    // Three GATT service
+    // mGATTServices[0] is for Matter-over-BLE
+    // mGATTServices[1] is for wifi_provisioning over BLE
+    // mGATTServices[2] is NULL
+    struct ble_gatt_svc_def mGATTServices[3];
+
+    // Secondary Advertisement
+    static int secondary_ble_svr_gap_event(struct ble_gap_event * event, void * arg);
+    CHIP_ERROR ConfigureSecondaryAdvertisingData(void);
+    CHIP_ERROR StartSecondaryAdvertising(void);
+    char mSecondaryAdvDeviceName[MAX_DEVICE_NAME_LEN + 1];
+    size_t mSecondGATTServiceIndex = 1;
+    ble_uuid128_t mSecondaryAdvUuid;
+    bool mSecondaryBleBonding;
+    bool mSecondaryBleSmSc;
+    ble_hs_adv_fields mSecondaryAdvFields;
+    ble_hs_adv_fields mSecondaryRespFields;
+    uint8_t *mSecondaryMfgData;
+    size_t mSecondaryMfgDataLen;
+    BleGapEventHandler mSecondaryBleGapEventHandler = nullptr;
+    static constexpr uint8_t kSecondaryAdvInstance = 1;
 };
 
 /**
diff --git a/src/platform/ESP32/ESP32Utils.cpp b/src/platform/ESP32/ESP32Utils.cpp
index e66007a0a8..5052535376 100644
--- a/src/platform/ESP32/ESP32Utils.cpp
+++ b/src/platform/ESP32/ESP32Utils.cpp
@@ -311,62 +311,7 @@ CHIP_ERROR ESP32Utils::ClearWiFiStationProvision(void)
 
 CHIP_ERROR ESP32Utils::InitWiFiStack(void)
 {
-    wifi_init_config_t cfg;
-    uint8_t ap_mac[6];
-    wifi_mode_t mode;
-    esp_err_t err = esp_netif_init();
-    if (err != ESP_OK)
-    {
-        return ESP32Utils::MapError(err);
-    }
-
-#if CHIP_DEVICE_CONFIG_ENABLE_WIFI_AP
-    // Lets not create a default AP interface if already present
-    if (!esp_netif_get_handle_from_ifkey(kDefaultWiFiAPNetifKey))
-    {
-        if (!esp_netif_create_default_wifi_ap())
-        {
-            ChipLogError(DeviceLayer, "Failed to create the WiFi AP netif");
-            return CHIP_ERROR_INTERNAL;
-        }
-    }
-#endif // CHIP_DEVICE_CONFIG_ENABLE_WIFI_AP
-
-    // Lets not create a default station interface if already present
-    if (!esp_netif_get_handle_from_ifkey(kDefaultWiFiStationNetifKey))
-    {
-        if (!esp_netif_create_default_wifi_sta())
-        {
-            ChipLogError(DeviceLayer, "Failed to create the WiFi STA netif");
-            return CHIP_ERROR_INTERNAL;
-        }
-    }
-
-    // Initialize the ESP WiFi layer.
-    cfg = WIFI_INIT_CONFIG_DEFAULT();
-    err = esp_wifi_init(&cfg);
-    if (err != ESP_OK)
-    {
-        return ESP32Utils::MapError(err);
-    }
-
-    esp_wifi_get_mode(&mode);
-    if ((mode == WIFI_MODE_AP) || (mode == WIFI_MODE_APSTA))
-    {
-        esp_fill_random(ap_mac, sizeof(ap_mac));
-        /* Bit 0 of the first octet of MAC Address should always be 0 */
-        ap_mac[0] &= (uint8_t) ~0x01;
-        err = esp_wifi_set_mac(WIFI_IF_AP, ap_mac);
-        if (err != ESP_OK)
-        {
-            return ESP32Utils::MapError(err);
-        }
-    }
-    err = esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, PlatformManagerImpl::HandleESPSystemEvent, NULL);
-    if (err != ESP_OK)
-    {
-        return ESP32Utils::MapError(err);
-    }
+    // Intentionally make this function empty so that we can setup wifi stack in the example
     return CHIP_NO_ERROR;
 }
 #endif // CHIP_DEVICE_CONFIG_ENABLE_WIFI
diff --git a/src/platform/ESP32/PlatformManagerImpl.cpp b/src/platform/ESP32/PlatformManagerImpl.cpp
index 2c73019933..7c11f63165 100644
--- a/src/platform/ESP32/PlatformManagerImpl.cpp
+++ b/src/platform/ESP32/PlatformManagerImpl.cpp
@@ -60,6 +60,17 @@ static int app_entropy_source(void * data, unsigned char * output, size_t len, s
     return 0;
 }
 
+CHIP_ERROR PlatformManagerImpl::DisableESPEventDispatch()
+{
+    esp_err_t err = esp_event_handler_unregister(WIFI_EVENT, ESP_EVENT_ANY_ID, PlatformManagerImpl::HandleESPSystemEvent);
+    if (err != ESP_OK)
+    {
+        return Internal::ESP32Utils::MapError(err);
+    }
+    err = esp_event_handler_unregister(IP_EVENT, ESP_EVENT_ANY_ID, PlatformManagerImpl::HandleESPSystemEvent);
+    return Internal::ESP32Utils::MapError(err);
+}
+
 CHIP_ERROR PlatformManagerImpl::_InitChipStack()
 {
     // Arrange for CHIP-encapsulated ESP32 errors to be translated to text
@@ -73,6 +84,11 @@ CHIP_ERROR PlatformManagerImpl::_InitChipStack()
     esp_err_t err = esp_netif_init();
     VerifyOrReturnError(err == ESP_OK, Internal::ESP32Utils::MapError(err));
 
+#if CHIP_DEVICE_CONFIG_ENABLE_WIFI
+    err = esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, PlatformManagerImpl::HandleESPSystemEvent, nullptr);
+    VerifyOrReturnError(err == ESP_OK, Internal::ESP32Utils::MapError(err));
+#endif
+
     // Arrange for the ESP event loop to deliver events into the CHIP Device layer.
     err = esp_event_handler_register(IP_EVENT, ESP_EVENT_ANY_ID, PlatformManagerImpl::HandleESPSystemEvent, nullptr);
     VerifyOrReturnError(err == ESP_OK, Internal::ESP32Utils::MapError(err));
diff --git a/src/platform/ESP32/PlatformManagerImpl.h b/src/platform/ESP32/PlatformManagerImpl.h
index cc2b0eefe9..0d99857ef8 100644
--- a/src/platform/ESP32/PlatformManagerImpl.h
+++ b/src/platform/ESP32/PlatformManagerImpl.h
@@ -52,6 +52,7 @@ public:
     CHIP_ERROR InitLwIPCoreLock(void);
     static void HandleESPSystemEvent(void * arg, esp_event_base_t eventBase, int32_t eventId, void * eventData);
     System::Clock::Timestamp GetStartTime() { return mStartTime; }
+    static CHIP_ERROR DisableESPEventDispatch();
 
 private:
     // ===== Methods that implement the PlatformManager abstract interface.
diff --git a/src/platform/ESP32/nimble/BLEManagerImpl.cpp b/src/platform/ESP32/nimble/BLEManagerImpl.cpp
index 0a2ddb1763..c9c81b4db1 100644
--- a/src/platform/ESP32/nimble/BLEManagerImpl.cpp
+++ b/src/platform/ESP32/nimble/BLEManagerImpl.cpp
@@ -127,39 +127,36 @@ uint8_t own_addr_type = BLE_OWN_ADDR_RANDOM;
 ChipDeviceScanner & mDeviceScanner = Internal::ChipDeviceScanner::GetInstance();
 #endif
 BLEManagerImpl BLEManagerImpl::sInstance;
-const struct ble_gatt_svc_def BLEManagerImpl::CHIPoBLEGATTAttrs[] = {
-    { .type = BLE_GATT_SVC_TYPE_PRIMARY,
-      .uuid = (ble_uuid_t *) (&ShortUUID_CHIPoBLEService),
-      .characteristics =
-          (struct ble_gatt_chr_def[]){
-              {
-                  .uuid       = (ble_uuid_t *) (&UUID128_CHIPoBLEChar_RX),
-                  .access_cb  = gatt_svr_chr_access,
-                  .flags      = BLE_GATT_CHR_F_WRITE,
-                  .val_handle = &sInstance.mRXCharAttrHandle,
-              },
-              {
-                  .uuid       = (ble_uuid_t *) (&UUID_CHIPoBLEChar_TX),
-                  .access_cb  = gatt_svr_chr_access,
-                  .flags      = BLE_GATT_CHR_F_READ | BLE_GATT_CHR_F_INDICATE,
-                  .val_handle = &sInstance.mTXCharCCCDAttrHandle,
-              },
+
+const struct ble_gatt_svc_def BLEManagerImpl::CHIPoBLEGATTService = {
+    .type = BLE_GATT_SVC_TYPE_PRIMARY,
+    .uuid = (ble_uuid_t *) (&ShortUUID_CHIPoBLEService),
+    .characteristics = (struct ble_gatt_chr_def[]){
+        {
+            .uuid = (ble_uuid_t *) (&UUID128_CHIPoBLEChar_RX),
+            .access_cb  = gatt_svr_chr_access,
+            .flags      = BLE_GATT_CHR_F_WRITE,
+            .val_handle = &sInstance.mRXCharAttrHandle,
+        },
+        {
+            .uuid      = (ble_uuid_t *) (&UUID_CHIPoBLEChar_TX),
+            .access_cb = gatt_svr_chr_access,
+            .flags =
+                BLE_GATT_CHR_F_READ | BLE_GATT_CHR_F_INDICATE,
+            .val_handle = &sInstance.mTXCharCCCDAttrHandle,
+        },
 #if CHIP_ENABLE_ADDITIONAL_DATA_ADVERTISING
-              {
-                  .uuid       = (ble_uuid_t *) (&UUID_CHIPoBLEChar_C3),
-                  .access_cb  = gatt_svr_chr_access_additional_data,
-                  .flags      = BLE_GATT_CHR_F_READ,
-                  .val_handle = &sInstance.mC3CharAttrHandle,
-              },
+        {
+            .uuid       = (ble_uuid_t *) (&UUID_CHIPoBLEChar_C3),
+            .access_cb  = gatt_svr_chr_access_additional_data,
+            .flags      = BLE_GATT_CHR_F_READ,
+            .val_handle = &sInstance.mC3CharAttrHandle,
+        },
 #endif
-              {
-                  0, /* No more characteristics in this service */
-              },
-          } },
-
-    {
-        0, /* No more services. */
-    },
+        {
+            0, /* No more characteristics in this service */
+        },
+    }
 };
 
 #ifdef CONFIG_ENABLE_ESP32_BLE_CONTROLLER
@@ -775,6 +772,12 @@ void BLEManagerImpl::DriveBLEState(void)
                     ChipLogError(DeviceLayer, "Configure Adv Data failed: %s", ErrorStr(err));
                     ExitNow();
                 }
+                err = ConfigureSecondaryAdvertisingData();
+                if (err != CHIP_NO_ERROR)
+                {
+                    ChipLogError(DeviceLayer, "Configure secondary Adv Data failed: %s", ErrorStr(err));
+                    ExitNow();
+                }
             }
 
             // Start advertising.  This is also an asynchronous step.
@@ -785,6 +788,12 @@ void BLEManagerImpl::DriveBLEState(void)
                 ChipLogError(DeviceLayer, "Start advertising failed: %s", ErrorStr(err));
                 ExitNow();
             }
+            err = StartSecondaryAdvertising();
+            if (err != CHIP_NO_ERROR)
+            {
+                ChipLogError(DeviceLayer, "Start secondary advertising failed: %s", ErrorStr(err));
+                ExitNow();
+            }
 
             mFlags.Clear(Flags::kAdvertisingRefreshNeeded);
             // Transition to the Advertising state...
@@ -810,12 +819,12 @@ void BLEManagerImpl::DriveBLEState(void)
     {
         if (mFlags.Has(Flags::kAdvertising))
         {
-            if (ble_gap_adv_active())
+            if (ble_gap_ext_adv_active(kChipAdvInstance))
             {
-                err = MapBLEError(ble_gap_adv_stop());
+                err = MapBLEError(ble_gap_ext_adv_stop(kChipAdvInstance));
                 if (err != CHIP_NO_ERROR)
                 {
-                    ChipLogError(DeviceLayer, "ble_gap_adv_stop() failed: %s", ErrorStr(err));
+                    ChipLogError(DeviceLayer, "ble_gap_ext_adv_stop() failed: %s", ErrorStr(err));
                     ExitNow();
                 }
             }
@@ -941,14 +950,15 @@ CHIP_ERROR BLEManagerImpl::InitESPBleLayer(void)
         ble_svc_gap_init();
         ble_svc_gatt_init();
 
-        err = MapBLEError(ble_gatts_count_cfg(CHIPoBLEGATTAttrs));
+        mGATTServices[1 - mSecondGATTServiceIndex] = CHIPoBLEGATTService;
+        err = MapBLEError(ble_gatts_count_cfg(mGATTServices));
         if (err != CHIP_NO_ERROR)
         {
             ChipLogError(DeviceLayer, "ble_gatts_count_cfg failed: %s", ErrorStr(err));
             ExitNow();
         }
 
-        err = MapBLEError(ble_gatts_add_svcs(CHIPoBLEGATTAttrs));
+        err = MapBLEError(ble_gatts_add_svcs(mGATTServices));
         if (err != CHIP_NO_ERROR)
         {
             ChipLogError(DeviceLayer, "ble_gatts_add_svcs failed: %s", ErrorStr(err));
@@ -1031,7 +1041,6 @@ extern "C" void ble_transport_ll_deinit(void) {}
 CHIP_ERROR BLEManagerImpl::ConfigureAdvertisingData(void)
 {
     CHIP_ERROR err;
-    uint8_t advData[MAX_ADV_DATA_LEN];
     uint8_t index = 0;
 
     constexpr uint8_t kServiceDataTypeSize = 1;
@@ -1057,14 +1066,14 @@ CHIP_ERROR BLEManagerImpl::ConfigureAdvertisingData(void)
         ExitNow();
     }
 
-    memset(advData, 0, sizeof(advData));
-    advData[index++] = 0x02;                                                                // length
-    advData[index++] = CHIP_ADV_DATA_TYPE_FLAGS;                                            // AD type : flags
-    advData[index++] = CHIP_ADV_DATA_FLAGS;                                                 // AD value
-    advData[index++] = kServiceDataTypeSize + sizeof(ESP32ChipServiceData);                 // length
-    advData[index++] = CHIP_ADV_DATA_TYPE_SERVICE_DATA;                                     // AD type: (Service Data - 16-bit UUID)
-    advData[index++] = static_cast<uint8_t>(ShortUUID_CHIPoBLEService.value & 0xFF);        // AD value
-    advData[index++] = static_cast<uint8_t>((ShortUUID_CHIPoBLEService.value >> 8) & 0xFF); // AD value
+    memset(mAdvData, 0, sizeof(mAdvData));
+    mAdvData[index++] = 0x02;                                                         // length
+    mAdvData[index++] = CHIP_ADV_DATA_TYPE_FLAGS;                                     // AD type : flags
+    mAdvData[index++] = CHIP_ADV_DATA_FLAGS;                                          // AD value
+    mAdvData[index++] = kServiceDataTypeSize + sizeof(ESP32ChipServiceData);          // length
+    mAdvData[index++] = CHIP_ADV_DATA_TYPE_SERVICE_DATA;                              // AD type: (Service Data - 16-bit UUID)
+    mAdvData[index++] = static_cast<uint8_t>(ShortUUID_CHIPoBLEService.value & 0xFF); // AD value
+    mAdvData[index++] = static_cast<uint8_t>((ShortUUID_CHIPoBLEService.value >> 8) & 0xFF); // AD value
 
     err = ConfigurationMgr().GetBLEDeviceIdentificationInfo(deviceIdInfo);
     if (err != CHIP_NO_ERROR)
@@ -1094,17 +1103,11 @@ CHIP_ERROR BLEManagerImpl::ConfigureAdvertisingData(void)
     }
 #endif
 
-    VerifyOrExit(index + sizeof(deviceIdInfo) <= sizeof(advData), err = CHIP_ERROR_OUTBOUND_MESSAGE_TOO_BIG);
-    memcpy(&advData[index], &deviceIdInfo, sizeof(deviceIdInfo));
+    VerifyOrExit(index + sizeof(deviceIdInfo) <= sizeof(mAdvData), err = CHIP_ERROR_OUTBOUND_MESSAGE_TOO_BIG);
+    memcpy(&mAdvData[index], &deviceIdInfo, sizeof(deviceIdInfo));
     index = static_cast<uint8_t>(index + sizeof(deviceIdInfo));
 
-    // Construct the Chip BLE Service Data to be sent in the scan response packet.
-    err = MapBLEError(ble_gap_adv_set_data(advData, sizeof(advData)));
-    if (err != CHIP_NO_ERROR)
-    {
-        ChipLogError(DeviceLayer, "ble_gap_adv_set_data failed: %s %d", ErrorStr(err), discriminator);
-        ExitNow();
-    }
+    mAdvDataLen = index;
 
 exit:
     return err;
@@ -1371,6 +1374,14 @@ CHIP_ERROR BLEManagerImpl::HandleGAPConnect(struct ble_gap_event * gapEvent)
 #endif
 }
 
+void BLEManagerImpl::RefreshAdv(void)
+{
+    mFlags.Set(Flags::kAdvertisingRefreshNeeded);
+    mFlags.Clear(Flags::kAdvertisingConfigured);
+
+    PlatformMgr().ScheduleWork(DriveBLEState, 0);
+}
+
 CHIP_ERROR BLEManagerImpl::HandleGAPDisconnect(struct ble_gap_event * gapEvent)
 {
     ChipLogProgress(DeviceLayer, "BLE GAP connection terminated (con %u reason 0x%02x)", gapEvent->disconnect.conn.conn_handle,
@@ -1658,16 +1669,18 @@ int BLEManagerImpl::gatt_svr_chr_access(uint16_t conn_handle, uint16_t attr_hand
 CHIP_ERROR BLEManagerImpl::StartAdvertising(void)
 {
     CHIP_ERROR err;
-    ble_gap_adv_params adv_params;
+    ble_gap_ext_adv_params adv_params;
     memset(&adv_params, 0, sizeof(adv_params));
-    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
+    adv_params.scannable     = 1;
+    adv_params.own_addr_type = own_addr_type;
+    adv_params.legacy_pdu    = 1;
 
     mFlags.Clear(Flags::kAdvertisingRefreshNeeded);
 
     // Advertise connectable if we haven't reached the maximum number of connections.
-    size_t numCons       = _NumConnections();
-    bool connectable     = (numCons < kMaxConnections);
-    adv_params.conn_mode = connectable ? BLE_GAP_CONN_MODE_UND : BLE_GAP_CONN_MODE_NON;
+    size_t numCons         = _NumConnections();
+    bool connectable       = (numCons < kMaxConnections);
+    adv_params.connectable = connectable;
 
     // Advertise in fast mode if it is connectable advertisement and
     // the application has expressly requested fast advertising.
@@ -1701,48 +1714,186 @@ CHIP_ERROR BLEManagerImpl::StartAdvertising(void)
                     (((uint32_t) adv_params.itvl_min) * 10) / 16, (connectable) ? "" : "non-");
 
     {
-        if (ble_gap_adv_active())
+        if (ble_gap_ext_adv_active(kChipAdvInstance))
         {
             /* Advertising is already active. Stop and restart with the new parameters */
             ChipLogProgress(DeviceLayer, "Device already advertising, stop active advertisement and restart");
-            err = MapBLEError(ble_gap_adv_stop());
+            err = MapBLEError(ble_gap_ext_adv_stop(kChipAdvInstance));
             if (err != CHIP_NO_ERROR)
             {
-                ChipLogError(DeviceLayer, "ble_gap_adv_stop() failed: %s, cannot restart", ErrorStr(err));
+                ChipLogError(DeviceLayer, "ble_gap_ext_adv_stop() failed: %s, cannot restart", ErrorStr(err));
                 return err;
             }
         }
-#ifdef CONFIG_BT_NIMBLE_HOST_BASED_PRIVACY
-        else
+        err = MapBLEError(ble_gap_ext_adv_configure(kChipAdvInstance, &adv_params, NULL, ble_svr_gap_event, NULL));
+        if (err != CHIP_NO_ERROR)
+        {
+            ChipLogError(DeviceLayer, "ble_gap_ext_adv_configure failed: %s", ErrorStr(err));
+            return err;
+        }
+
+        ble_addr_t addr;
+
+        /* generate new non-resolvable private address */
+        err = MapBLEError(ble_hs_id_gen_rnd(1, &addr));
+        if (err != CHIP_NO_ERROR)
+        {
+            ChipLogError(DeviceLayer, "ble_hs_id_gen_rnd failed: %s", ErrorStr(err));
+            return err;
+        }
+
+        /* Set generated address */
+        err = MapBLEError(ble_gap_ext_adv_set_addr(kChipAdvInstance, &addr));
+        if (err != CHIP_NO_ERROR)
+        {
+            ChipLogError(DeviceLayer, "ble_gap_ext_adv_set_addr failed: %s", ErrorStr(err));
+            return err;
+        }
+
+        struct os_mbuf * data = os_msys_get_pkthdr(mAdvDataLen, 0);
+        assert(data);
+        err = MapBLEError(os_mbuf_append(data, mAdvData, mAdvDataLen));
+        if (err != CHIP_NO_ERROR)
+        {
+            ChipLogError(DeviceLayer, "os_mbuf_append failed: %s", ErrorStr(err));
+            return err;
+        }
+
+        err = MapBLEError(ble_gap_ext_adv_set_data(kChipAdvInstance, data));
+        if (err != CHIP_NO_ERROR)
+        {
+            ChipLogError(DeviceLayer, "os_mbuf_append failed: %s", ErrorStr(err));
+            return err;
+        }
+
+        if (mScanResponse.HasValue())
         {
-            err = MapBLEError(ble_hs_pvcy_rpa_config(NIMBLE_HOST_ENABLE_RPA));
+            uint16_t resp_size         = static_cast<uint16_t>(mScanResponse.Value().size());
+            struct os_mbuf * resp_data = os_msys_get_pkthdr(resp_size, 0);
+            assert(resp_data);
+            err = MapBLEError(os_mbuf_append(resp_data, mScanResponse.Value().data(), resp_size));
             if (err != CHIP_NO_ERROR)
             {
-                ChipLogError(DeviceLayer, "RPA not set: %s", ErrorStr(err));
+                ChipLogError(DeviceLayer, "os_mbuf_append failed: %s", ErrorStr(err));
                 return err;
             }
-        }
-#endif
-        if (mScanResponse.HasValue())
-        {
-            err = MapBLEError(ble_gap_adv_rsp_set_data(mScanResponse.Value().data(), mScanResponse.Value().size()));
+            err = MapBLEError(ble_gap_ext_adv_rsp_set_data(kChipAdvInstance, resp_data));
             if (err != CHIP_NO_ERROR)
             {
-                ChipLogError(DeviceLayer, "ble_gap_adv_rsp_set_data failed: %s", ErrorStr(err));
+                ChipLogError(DeviceLayer, "ble_gap_ext_adv_rsp_set_data failed: %s", ErrorStr(err));
                 return err;
             }
         }
-        err = MapBLEError(ble_gap_adv_start(own_addr_type, NULL, BLE_HS_FOREVER, &adv_params, ble_svr_gap_event, NULL));
-        if (err == CHIP_NO_ERROR)
+        err = MapBLEError(ble_gap_ext_adv_start(kChipAdvInstance, 0, 0));
+        if (err != CHIP_NO_ERROR)
         {
-            return CHIP_NO_ERROR;
+            ChipLogError(DeviceLayer, "ble_gap_ext_adv_start() failed: %s", ErrorStr(err));
         }
-        else
+    }
+    return err;
+}
+
+int BLEManagerImpl::secondary_ble_svr_gap_event(struct ble_gap_event * event, void * arg)
+{
+    if (chip::DeviceLayer::Internal::BLEMgrImpl().mSecondaryBleGapEventHandler) {
+        return chip::DeviceLayer::Internal::BLEMgrImpl().mSecondaryBleGapEventHandler(event, arg);
+    }
+    return 0;
+}
+
+CHIP_ERROR BLEManagerImpl::ConfigureSecondaryAdvertisingData(void)
+{
+    memset(&mSecondaryAdvFields, 0, sizeof(mSecondaryAdvFields));
+    mSecondaryAdvFields.flags = (BLE_HS_ADV_F_DISC_GEN | BLE_HS_ADV_F_BREDR_UNSUP);
+    mSecondaryAdvFields.num_uuids128 = 1;
+    mSecondaryAdvFields.uuids128_is_complete = 1;
+    mSecondaryAdvFields.uuids128 = &mSecondaryAdvUuid;
+
+    memset(&mSecondaryRespFields, 0, sizeof(mSecondaryRespFields));
+    mSecondaryRespFields.name = (const uint8_t *)mSecondaryAdvDeviceName;
+    mSecondaryRespFields.name_len = (uint8_t)strlen(mSecondaryAdvDeviceName);
+    mSecondaryRespFields.name_is_complete = 1;
+    return CHIP_NO_ERROR;
+}
+
+CHIP_ERROR BLEManagerImpl::StartSecondaryAdvertising(void)
+{
+    CHIP_ERROR err;
+    uint8_t secondary_own_addr_type;
+    err = MapBLEError(ble_hs_util_ensure_addr(0));
+    if (err != CHIP_NO_ERROR) {
+        ESP_LOGE(TAG, "Error loading address");
+        return err;
+    }
+
+    /* Figure out address to use while advertising (no privacy for now) */
+    err = MapBLEError(ble_hs_id_infer_auto(0, &secondary_own_addr_type));
+    if (err != CHIP_NO_ERROR) {
+        ChipLogError(DeviceLayer, "ble_hs_id_infer_auto() failed: %s, cannot restart", ErrorStr(err));
+        return err;
+    }
+    ble_gap_ext_adv_params adv_params;
+    memset(&adv_params, 0, sizeof(adv_params));
+    adv_params.scannable     = 1;
+    adv_params.own_addr_type = secondary_own_addr_type;
+    adv_params.legacy_pdu    = 1;
+    adv_params.connectable = 1;
+    adv_params.itvl_min = 0x100;
+    adv_params.itvl_max = 0x100;
+
+    if (ble_gap_ext_adv_active(kSecondaryAdvInstance))
+    {
+        /* Advertising is already active. Stop and restart with the new parameters */
+        ChipLogProgress(DeviceLayer, "Device already advertising, stop active advertisement and restart");
+        err = MapBLEError(ble_gap_ext_adv_stop(kSecondaryAdvInstance));
+        if (err != CHIP_NO_ERROR)
         {
-            ChipLogError(DeviceLayer, "ble_gap_adv_start() failed: %s", ErrorStr(err));
+            ChipLogError(DeviceLayer, "ble_gap_ext_adv_stop() failed: %s, cannot restart", ErrorStr(err));
             return err;
         }
     }
+    err = MapBLEError(ble_gap_ext_adv_configure(kSecondaryAdvInstance, &adv_params, NULL, secondary_ble_svr_gap_event, NULL));
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(DeviceLayer, "ble_gap_ext_adv_configure failed: %s", ErrorStr(err));
+        return err;
+    }
+
+    struct os_mbuf * data = os_msys_get_pkthdr(BLE_HCI_MAX_ADV_DATA_LEN, 0);
+    assert(data);
+    err = MapBLEError(ble_hs_adv_set_fields_mbuf(&mSecondaryAdvFields, data));
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(DeviceLayer, "ble_hs_adv_set_fields_mbuf failed: %s", ErrorStr(err));
+        return err;
+    }
+    err = MapBLEError(ble_gap_ext_adv_set_data(kSecondaryAdvInstance, data));
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(DeviceLayer, "ble_gap_ext_adv_set_data failed: %s", ErrorStr(err));
+        return err;
+    }
+
+    struct os_mbuf * resp_data = os_msys_get_pkthdr(BLE_HCI_MAX_ADV_DATA_LEN, 0);
+    assert(resp_data);
+    err = MapBLEError(ble_hs_adv_set_fields_mbuf(&mSecondaryRespFields, resp_data));
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(DeviceLayer, "ble_hs_adv_set_fields_mbuf failed: %s", ErrorStr(err));
+        return err;
+    }
+    err = MapBLEError(ble_gap_ext_adv_rsp_set_data(kSecondaryAdvInstance, resp_data));
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(DeviceLayer, "ble_gap_ext_adv_set_data failed: %s", ErrorStr(err));
+        return err;
+    }
+    err = MapBLEError(ble_gap_ext_adv_start(kSecondaryAdvInstance, 0, 0));
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(DeviceLayer, "ble_gap_ext_adv_start() failed: %s", ErrorStr(err));
+    }
+    return err;
 }
 
 void BLEManagerImpl::DriveBLEState(intptr_t arg)
